// Reverse any list
[t] reverse ([t] list) {
    [t] accu = [];
    while (!isEmpty(list)) {
        accu = head(list) : accu;
        list = tail(list);
    }
    return accu;
}

// Calculate the sum of a list of integers
Int sum ([Int] list)
{
    if (isEmpty(list))
        return 0;
    else
        return head(list) + sum(tail(list));
}

// Calculate the product of a list of integers
Int product ([Int] list)
{
    if (isEmpty(list))
        return 1;
    else
      return head(list) * product(tail(list));
}

// Check if two lists are equal
Bool equal ([Int] a, [Int] b) {
    if (isEmpty(a) && isEmpty(b))
        return False;
    if (isEmpty(a) || isEmpty(b))
        return False;
    return (head(a) == head(b)) && equal(tail(a), tail(b));    
}

// All values have to be True
Bool all ([Bool] list) {
    if (isEmpty(list))
        return True;
    else
        return head(list) && all(tail(list));
}

// One or more values have to be True
Bool any ([Bool] list) {
    if (isEmpty(list))
        return False;
    else
        return head(list) || any(tail(list));
}

Void main ()
{
    [Int] list = 1:3:5:[];
    print(sum(list));
    print(product(list));
}

// vim: ft=c syn=spl
